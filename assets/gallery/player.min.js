/*! @vimeo/player v1.0.6 | (c) 2016 Vimeo | MIT License | https://github.com/vimeo/player.js */
!(function (e, t) { typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = t() : typeof define === 'function' && define.amd ? define(t) : (e.Vimeo = e.Vimeo || {}, e.Vimeo.Player = t()) }(this, function () { 'use strict'; function e (e, t) { return t = { exports: {} }, e(t, t.exports), t.exports } function t (e, t, n) { const r = T.get(e.element) || {}; t in r || (r[t] = []), r[t].push(n), T.set(e.element, r) } function n (e, t) { const n = T.get(e.element) || {}; return n[t] || [] } function r (e, t, n) { const r = T.get(e.element) || {}; if (!r[t]) return !0; if (!n) return r[t] = [], T.set(e.element, r), !0; const o = r[t].indexOf(n); return o !== -1 && r[t].splice(o, 1), T.set(e.element, r), r[t] && r[t].length === 0 } function o (e, t) { const n = T.get(e); T.set(t, n), T.delete(e) } function i (e, t) { return e.indexOf(t.toLowerCase()) === 0 ? e : '' + t.toLowerCase() + e.substr(0, 1).toUpperCase() + e.substr(1) } function a (e) { return e instanceof window.HTMLElement } function u (e) { return !isNaN(parseFloat(e)) && isFinite(e) && Math.floor(e) == e } function s (e) { return /^(https?:)?\/\/(player.)?vimeo.com(?=$|\/)/.test(e) } function c () { const e = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0]; const t = e.id; const n = e.url; const r = t || n; if (!r) throw new Error('An id or url must be passed, either in an options object or as a data-vimeo-id or data-vimeo-url attribute.'); if (u(r)) return 'https://vimeo.com/' + r; if (s(r)) return r.replace('http:', 'https:'); if (t) throw new TypeError('“' + t + '” is not a valid video id.'); throw new TypeError('“' + r + '” is not a vimeo.com url.') } function f (e) { for (var t = arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1], n = _, r = Array.isArray(n), o = 0, n = r ? n : n[Symbol.iterator](); ;) { var i; if (r) { if (o >= n.length) break; i = n[o++] } else { if (o = n.next(), o.done) break; i = o.value } const a = i; const u = e.getAttribute('data-vimeo-' + a); (u || u === '') && (t[a] = u === '' ? 1 : u) } return t } function l (e) { const t = arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1]; return new Promise(function (n, r) { if (!s(e)) throw new TypeError('“' + e + '” is not a vimeo.com url.'); let o = 'https://vimeo.com/api/oembed.json?url=' + encodeURIComponent(e); for (const i in t)t.hasOwnProperty(i) && (o += '&' + i + '=' + encodeURIComponent(t[i])); const a = 'XDomainRequest' in window ? new XDomainRequest() : new XMLHttpRequest(); a.open('GET', o, !0), a.onload = function () { if (a.status === 404) return void r(new Error('“' + e + '” was not found.')); if (a.status === 403) return void r(new Error('“' + e + '” is not embeddable.')); try { const t = JSON.parse(a.responseText); n(t) } catch (e) { r(e) } }, a.onerror = function () { const e = a.status ? ' (' + a.status + ')' : ''; r(new Error('There was an error fetching the embed code from Vimeo' + e + '.')) }, a.send() }) } function h (e, t) { const n = e.html; if (!t) throw new TypeError('An element must be provided'); if (t.getAttribute('data-vimeo-initialized') !== null) return t.querySelector('iframe'); const r = document.createElement('div'); return r.innerHTML = n, t.appendChild(r.firstChild), t.setAttribute('data-vimeo-initialized', 'true'), t.querySelector('iframe') } function d () { const e = arguments.length <= 0 || void 0 === arguments[0] ? document : arguments[0]; const t = [].slice.call(e.querySelectorAll('[data-vimeo-id], [data-vimeo-url]')); const n = function (e) { 'console' in window && console.error && console.error('There was an error creating an embed: ' + e) }; const r = function () { if (i) { if (a >= o.length) return 'break'; u = o[a++] } else { if (a = o.next(), a.done) return 'break'; u = a.value } const e = u; try { if (e.getAttribute('data-vimeo-defer') !== null) return 'continue'; const t = f(e); const r = c(t); l(r, t).then(function (t) { return h(t, e) }).catch(n) } catch (e) { n(e) } }; e:for (var o = t, i = Array.isArray(o), a = 0, o = i ? o : o[Symbol.iterator](); ;) { var u; const s = r(); switch (s) { case 'break':break e; case 'continue':continue } } } function p (e) { return typeof e === 'string' && (e = JSON.parse(e)), e } function v (e, t, n) { if (e.element.contentWindow.postMessage) { let r = { method: t }; void 0 !== n && (r.value = n); const o = parseFloat(navigator.userAgent.toLowerCase().replace(/^.*msie (\d+).*$/, '$1')); o >= 8 && o < 10 && (r = JSON.stringify(r)), e.element.contentWindow.postMessage(r, e.origin) } } function y (e, t) { t = p(t); let o = []; let i = void 0; if (t.event) { if (t.event === 'error') for (var a = n(e, t.data.method), u = a, s = Array.isArray(u), c = 0, u = s ? u : u[Symbol.iterator](); ;) { var f; if (s) { if (c >= u.length) break; f = u[c++] } else { if (c = u.next(), c.done) break; f = c.value } const l = f; const h = new Error(t.data.message); h.name = t.data.name, l.reject(h), r(e, t.data.method, l) }o = n(e, 'event:' + t.event), i = t.data } else t.method && (o = n(e, t.method), i = t.value, r(e, t.method)); for (var d = o, v = Array.isArray(d), y = 0, d = v ? d : d[Symbol.iterator](); ;) { var m; if (v) { if (y >= d.length) break; m = d[y++] } else { if (y = d.next(), y.done) break; m = y.value } const g = m; try { if (typeof g === 'function') { g.call(e, i); continue }g.resolve(i) } catch (e) {} } } const m = typeof Array.prototype.indexOf !== 'undefined'; const g = typeof window.postMessage !== 'undefined'; if (!m || !g) throw new Error('Sorry, the Vimeo Player API is not available in this browser.'); const w = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {}; const b = (e(function (e, t) { !(function (e) { function t (e, t) { function r (e) { return this && this.constructor === r ? (this._keys = [], this._values = [], this._itp = [], this.objectOnly = t, void (e && n.call(this, e))) : new r(e) } return t || w(e, 'size', { get: y }), e.constructor = r, r.prototype = e, r } function n (e) { this.add ? e.forEach(this.add, this) : e.forEach(function (e) { this.set(e[0], e[1]) }, this) } function r (e) { return this.has(e) && (this._keys.splice(g, 1), this._values.splice(g, 1), this._itp.forEach(function (e) { g < e[0] && e[0]-- })), g > -1 } function o (e) { return this.has(e) ? this._values[g] : void 0 } function i (e, t) { if (this.objectOnly && t !== Object(t)) throw new TypeError('Invalid value used as weak collection key'); if (t != t || t === 0) for (g = e.length; g-- && !b(e[g], t););else g = e.indexOf(t); return g > -1 } function a (e) { return i.call(this, this._values, e) } function u (e) { return i.call(this, this._keys, e) } function s (e, t) { return this.has(e) ? this._values[g] = t : this._values[this._keys.push(e) - 1] = t, this } function c (e) { return this.has(e) || this._values.push(e), this } function f () { (this._keys || 0).length = this._values.length = 0 } function l () { return v(this._itp, this._keys) } function h () { return v(this._itp, this._values) } function d () { return v(this._itp, this._keys, this._values) } function p () { return v(this._itp, this._values, this._values) } function v (e, t, n) { const r = [0]; let o = !1; return e.push(r), { next: function () { let i; const a = r[0]; return !o && a < t.length ? (i = n ? [t[a], n[a]] : t[a], r[0]++) : (o = !0, e.splice(e.indexOf(r), 1)), { done: o, value: i } } } } function y () { return this._values.length } function m (e, t) { for (let n = this.entries(); ;) { const r = n.next(); if (r.done) break; e.call(t, r.value[1], r.value[0], this) } } let g; var w = Object.defineProperty; var b = function (e, t) { return e === t || e !== e && t !== t }; typeof WeakMap === 'undefined' && (e.WeakMap = t({ delete: r, clear: f, get: o, has: u, set: s }, !0)), typeof Map !== 'undefined' && typeof (new Map()).values === 'function' && (new Map()).values().next || (e.Map = t({ delete: r, has: u, get: o, set: s, keys: l, values: h, entries: d, forEach: m, clear: f })), typeof Set !== 'undefined' && typeof (new Set()).values === 'function' && (new Set()).values().next || (e.Set = t({ has: a, add: c, delete: r, clear: f, keys: h, values: h, entries: p, forEach: m })), typeof WeakSet === 'undefined' && (e.WeakSet = t({ delete: r, add: c, clear: f, has: a }, !0)) }(typeof t !== 'undefined' && typeof w !== 'undefined' ? w : window)) }), e(function (e) { !(function (t, n, r) { n[t] = n[t] || r(), typeof e !== 'undefined' && e.exports ? e.exports = n[t] : typeof define === 'function' && define.amd && define(function () { return n[t] }) }('Promise', typeof w !== 'undefined' ? w : w, function () { function e (e, t) { h.add(e, t), l || (l = p(h.drain)) } function t (e) { let t; const n = typeof e; return e == null || n != 'object' && n != 'function' || (t = e.then), typeof t === 'function' && t } function n () { for (let e = 0; e < this.chain.length; e++)r(this, this.state === 1 ? this.chain[e].success : this.chain[e].failure, this.chain[e]); this.chain.length = 0 } function r (e, n, r) { let o, i; try { n === !1 ? r.reject(e.msg) : (o = n === !0 ? e.msg : n.call(void 0, e.msg), o === r.promise ? r.reject(TypeError('Promise-chain cycle')) : (i = t(o)) ? i.call(o, r.resolve, r.reject) : r.resolve(o)) } catch (e) { r.reject(e) } } function o (r) { let a; let s = this; if (!s.triggered) { s.triggered = !0, s.def && (s = s.def); try { (a = t(r)) ? e(function () { const e = new u(s); try { a.call(r, function () { o.apply(e, arguments) }, function () { i.apply(e, arguments) }) } catch (t) { i.call(e, t) } }) : (s.msg = r, s.state = 1, s.chain.length > 0 && e(n, s)) } catch (e) { i.call(new u(s), e) } } } function i (t) { let r = this; r.triggered || (r.triggered = !0, r.def && (r = r.def), r.msg = t, r.state = 2, r.chain.length > 0 && e(n, r)) } function a (e, t, n, r) { for (let o = 0; o < t.length; o++)!(function (o) { e.resolve(t[o]).then(function (e) { n(o, e) }, r) }(o)) } function u (e) { this.def = e, this.triggered = !1 } function s (e) { this.promise = e, this.state = 0, this.triggered = !1, this.chain = [], this.msg = void 0 } function c (t) { if (typeof t !== 'function') throw TypeError('Not a function'); if (this.__NPO__ !== 0) throw TypeError('Not a promise'); this.__NPO__ = 1; const r = new s(this); this.then = function (t, o) { const i = { success: typeof t !== 'function' || t, failure: typeof o === 'function' && o }; return i.promise = new this.constructor(function (e, t) { if (typeof e !== 'function' || typeof t !== 'function') throw TypeError('Not a function'); i.resolve = e, i.reject = t }), r.chain.push(i), r.state !== 0 && e(n, r), i.promise }, this.catch = function (e) { return this.then(void 0, e) }; try { t.call(void 0, function (e) { o.call(r, e) }, function (e) { i.call(r, e) }) } catch (e) { i.call(r, e) } } let f; let l; let h; const d = Object.prototype.toString; var p = typeof setImmediate !== 'undefined' ? function (e) { return setImmediate(e) } : setTimeout; try { Object.defineProperty({}, 'x', {}), f = function (e, t, n, r) { return Object.defineProperty(e, t, { value: n, writable: !0, configurable: r !== !1 }) } } catch (e) { f = function (e, t, n) { return e[t] = n, e } }h = (function () { function e (e, t) { this.fn = e, this.self = t, this.next = void 0 } let t, n, r; return { add: function (o, i) { r = new e(o, i), n ? n.next = r : t = r, n = r, r = void 0 }, drain: function () { let e = t; for (t = n = l = void 0; e;)e.fn.call(e.self), e = e.next } } }()); const v = f({}, 'constructor', c, !1); return c.prototype = v, f(v, '__NPO__', 0, !1), f(c, 'resolve', function (e) { const t = this; return e && typeof e === 'object' && e.__NPO__ === 1 ? e : new t(function (t, n) { if (typeof t !== 'function' || typeof n !== 'function') throw TypeError('Not a function'); t(e) }) }), f(c, 'reject', function (e) { return new this(function (t, n) { if (typeof t !== 'function' || typeof n !== 'function') throw TypeError('Not a function'); n(e) }) }), f(c, 'all', function (e) { const t = this; return d.call(e) != '[object Array]' ? t.reject(TypeError('Not an array')) : e.length === 0 ? t.resolve([]) : new t(function (n, r) { if (typeof n !== 'function' || typeof r !== 'function') throw TypeError('Not a function'); const o = e.length; const i = Array(o); let u = 0; a(t, e, function (e, t) { i[e] = t, ++u === o && n(i) }, r) }) }), f(c, 'race', function (e) { const t = this; return d.call(e) != '[object Array]' ? t.reject(TypeError('Not an array')) : new t(function (n, r) { if (typeof n !== 'function' || typeof r !== 'function') throw TypeError('Not a function'); a(t, e, function (e, t) { n(t) }, r) }) }), c })) })); const E = b && typeof b === 'object' && 'default' in b ? b.default : b; var T = new WeakMap(); var _ = ['id', 'url', 'width', 'maxwidth', 'height', 'maxheight', 'portrait', 'title', 'byline', 'color', 'autoplay', 'autopause', 'loop', 'responsive']; const k = function (e, t) { if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function') }; const x = new WeakMap(); const j = new WeakMap(); const Player = (function () { function Player (e) { const t = this; const n = arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1]; if (k(this, Player), window.jQuery && e instanceof jQuery && (e.length > 1 && window.console && console.warn && console.warn('A jQuery object with multiple elements was passed, using the first element.'), e = e[0]), typeof e === 'string' && (e = document.getElementById(e)), !a(e)) throw new TypeError('You must pass either a valid element or a valid id.'); if (e.nodeName !== 'IFRAME') { const r = e.querySelector('iframe'); r && (e = r) } if (e.nodeName === 'IFRAME' && !s(e.getAttribute('src') || '')) throw new Error('The player element passed isn’t a Vimeo embed.'); if (x.has(e)) return x.get(e); this.element = e, this.origin = '*'; const i = new E(function (r, i) { const a = function (e) { if (s(e.origin) && t.element.contentWindow === e.source) { t.origin === '*' && (t.origin = e.origin); const n = p(e.data); const o = 'event' in n && n.event === 'ready'; const i = 'method' in n && n.method === 'ping'; return o || i ? (t.element.setAttribute('data-ready', 'true'), void r()) : void y(t, n) } }; if (window.addEventListener ? window.addEventListener('message', a, !1) : window.attachEvent && window.attachEvent('onmessage', a), t.element.nodeName !== 'IFRAME') { const u = f(e, n); const d = c(u); l(d, u).then(function (n) { const r = h(n, e); return t.element = r, o(e, r), n }).catch(function (e) { return i(e) }) } }); return j.set(this, i), x.set(this.element, this), this.element.nodeName === 'IFRAME' && v(this, 'ping'), this } return Player.prototype.then = function (e) { const t = arguments.length <= 1 || void 0 === arguments[1] ? function () {} : arguments[1]; return this.ready().then(e, t) }, Player.prototype.callMethod = function (e) { const n = this; const r = arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1]; return new E(function (o, i) { return n.ready().then(function () { t(n, e, { resolve: o, reject: i }), v(n, e, r) }) }) }, Player.prototype.get = function (e) { const n = this; return new E(function (r, o) { return e = i(e, 'get'), n.ready().then(function () { t(n, e, { resolve: r, reject: o }), v(n, e) }) }) }, Player.prototype.set = function (e, n) { const r = this; return E.resolve(n).then(function (n) { if (e = i(e, 'set'), void 0 === n || n === null) throw new TypeError('There must be a value to set.'); return r.ready().then(function () { return new E(function (o, i) { t(r, e, { resolve: o, reject: i }), v(r, e, n) }) }) }) }, Player.prototype.on = function (e, r) { if (!e) throw new TypeError('You must pass an event name.'); if (!r) throw new TypeError('You must pass a callback function.'); if (typeof r !== 'function') throw new TypeError('The callback must be a function.'); const o = n(this, 'event:' + e); o.length === 0 && this.callMethod('addEventListener', e).catch(function () {}), t(this, 'event:' + e, r) }, Player.prototype.off = function (e, t) { if (!e) throw new TypeError('You must pass an event name.'); if (t && typeof t !== 'function') throw new TypeError('The callback must be a function.'); const n = r(this, 'event:' + e, t); n && this.callMethod('removeEventListener', e).catch(function (e) {}) }, Player.prototype.loadVideo = function (e) { return this.callMethod('loadVideo', e) }, Player.prototype.ready = function () { const e = j.get(this); return E.resolve(e) }, Player.prototype.enableTextTrack = function (e, t) { if (!e) throw new TypeError('You must pass a language.'); return this.callMethod('enableTextTrack', { language: e, kind: t }) }, Player.prototype.disableTextTrack = function () { return this.callMethod('disableTextTrack') }, Player.prototype.pause = function () { return this.callMethod('pause') }, Player.prototype.play = function () { return this.callMethod('play') }, Player.prototype.unload = function () { return this.callMethod('unload') }, Player.prototype.getAutopause = function () { return this.get('autopause') }, Player.prototype.setAutopause = function (e) { return this.set('autopause', e) }, Player.prototype.getColor = function () { return this.get('color') }, Player.prototype.setColor = function (e) { return this.set('color', e) }, Player.prototype.getCurrentTime = function () { return this.get('currentTime') }, Player.prototype.setCurrentTime = function (e) { return this.set('currentTime', e) }, Player.prototype.getDuration = function () { return this.get('duration') }, Player.prototype.getEnded = function () { return this.get('ended') }, Player.prototype.getLoop = function () { return this.get('loop') }, Player.prototype.setLoop = function (e) { return this.set('loop', e) }, Player.prototype.getPaused = function () { return this.get('paused') }, Player.prototype.getTextTracks = function () { return this.get('textTracks') }, Player.prototype.getVideoEmbedCode = function () { return this.get('videoEmbedCode') }, Player.prototype.getVideoId = function () { return this.get('videoId') }, Player.prototype.getVideoTitle = function () { return this.get('videoTitle') }, Player.prototype.getVideoWidth = function () { return this.get('videoWidth') }, Player.prototype.getVideoHeight = function () { return this.get('videoHeight') }, Player.prototype.getVideoUrl = function () { return this.get('videoUrl') }, Player.prototype.getVolume = function () { return this.get('volume') }, Player.prototype.setVolume = function (e) { return this.set('volume', e) }, Player }()); return d(), Player }))
